#Questão 1

def ordem_decrescente(lista1, lista2):
    i=0
    j=0
    nova_lista=[]
    while i<len(lista1) and j<len(lista2): #põe os números em ordem numa nova lista
        if lista1[i]>lista2[j]:
            nova_lista.append(lista1[i])
            i+=1
        elif lista1[i]==lista2[j]: #essa parte do código evita repetições
            nova_lista.append(lista2[j])
            j+=1
            i+=1
        else:
            nova_lista.append(lista2[j])
            j+=1
#Adiciona os elementos que sobraram da lista maior
    while i<len(lista1):
            nova_lista.append(lista1[i])
            i+=1
    while j<len(lista2):
            nova_lista.append(lista2[j])
            j+=1
    return nova_lista
ordem_decrescente([5, 4, 2, 1, 0, -1, -10000], [79, 60, 30, 20, 10, 9, 3, 1, 0.5, -1, 10000])

#Questão 2


def vamos_comprar(N, K, lista):
  compras=[lista[0]]
  for i in range(1,len(lista)):
    contagem=0 #conta quantos elementos repetidos tem num range K
    for j in range(0, K):
      if i-j>=0:
        if lista[i] == compras[len(compras)-j-1]:
            contagem+=1
    if contagem==0:#se não houverem elementos repetidos o item é comprado
      compras.append(lista[i])  
  print(compras)    
  return len(compras)
print(vamos_comprar(13 ,3, [1, 8, 9, 10, 10, 8 ,1, 2, 3, 4, 5, 6, 8 ]))

#Questão 3

def string_valida(string):
    parenteses=[]
    for caracter in string:
        if caracter == '(':
            parenteses.append('(')
        elif caracter == ')':
            if len(parenteses)==0: 
                return False
            else:
                parenteses.pop() #remove o ultimo item da lista para garantir que nela só tenha um parentese de abertura caso não tenha um de fechamento correspondente
            
    if len(parenteses)==0: #todos os parenteses de abertura tem um de fechamento
        return True
    else:
        return False

string_valida(')))((( ')

#Questão 4

class Point2D:
    def __init__(self, x: float, y: float):
        self.coord = (x, y)
    
    def __str__(self):
        return f"({self.coord[0]}, {self.coord[1]})"
    
class Polygon:
    def __init__(self, points: list[Point2D], color: str):
        self.points = points
        self.color = color
    
    def printar_poligono(self):
        points_str = []
        for point in self.points:
            points_str.append(str(point))
        points_str = ", ".join(points_str)
        print(f"Polygon([{points_str}], '{self.color}')")

class Polygons:
    def __init__(self):
        self.lista_poligonos = []

    def add_polygon(self, polygon: Polygon, name: str):
        self.lista_poligonos.append((polygon, name))

    def remove_polygon(self, name: str):
        updated_list = []
        for polygon, polygon_name in self.lista_poligonos:
            if polygon_name != name:
                updated_list.append((polygon, polygon_name))
        self.lista_poligonos = updated_list

    def printar_poligonos(self):
        for polygon, name in self.lista_poligonos:
            polygon.printar_poligono()

    def save_to_file(self, filename: str):
        with open(filename, 'w') as file:
            for polygon, name in self.lista_poligonos:
                file.write(f"{name}:\n")
                file.write(f"Color: {polygon.color}\n")
                file.write("Points:\n")
                for point in polygon.points:
                    file.write(f"({point.coord[0]}, {point.coord[1]})\n")
                file.write("\n")
    
    def load_from_file(self, filename: str):
        self.lista_poligonos = []
        with open(filename, 'r') as file:
            lines = file.readlines()
            i = 0
            while i < len(lines):
                if lines[i].strip() == "":
                    i += 1
                    continue
                name = lines[i].strip().rstrip(":")
                color = lines[i + 1].strip().split(": ")[1]
                points = []
                i += 3
                while i < len(lines) and lines[i].strip() != "":
                    x, y = lines[i].strip().strip("()").split(", ")
                    points.append(Point2D(float(x), float(y)))
                    i += 1
                polygon = Polygon(points, color)
                self.add_polygon(polygon, name)
                i += 1


if __name__ == '__main__':
    ponto1 = Point2D(3, 4)
    ponto2 = Point2D(0, 1)
    ponto3 = Point2D(3, 5)
    ponto4 = Point2D(1, 0)

    print('Pontos:')
    print(ponto1.__str__())
    print(ponto2.__str__())
    print(ponto3.__str__())
    print(ponto4.__str__())

    poligono = Polygon([ponto1, ponto2, ponto3, ponto1], 'blue')
    poligono2 = Polygon([ponto4, ponto3, ponto1, ponto4],'pink')

    poligonos = Polygons()
    poligonos.add_polygon(poligono, 'pol1')
    poligonos.add_polygon(poligono2, 'pol2')

    print("\nPolígonos adicionados:")
    poligonos.printar_poligonos()

    poligonos.remove_polygon('pol1')

    print('\nO que restou:')
    poligonos.printar_poligonos()

    poligonos.save_to_file('poligonos.txt')

    polygons_carregados = Polygons()
    polygons_carregados.load_from_file('poligonos.txt')

    print("\nPolígonos carregados:")
    polygons_carregados.printar_poligonos()

#Questão 5

import Polygons
import turtle 
def plot_polygons(polygons):
    screen = turtle.Screen()
    
    for polygon, name in polygons.lista_poligonos:
        t = turtle.Turtle()
        t.color(polygon.color)
        t.penup()
        t.goto(polygon.points[0].coord)
        t.pendown()
        
        for point in polygon.points[1:]:
            t.goto(point.coord)
        
        t.goto(polygon.points[0].coord)
    
    turtle.done()


if __name__ == '__main__':

    ponto1 = Polygons.Point2D(100, 40)
    ponto2 = Polygons.Point2D(0, 10)
    ponto3 = Polygons.Point2D(30, 50)
    ponto4 = Polygons.Point2D(10, 0)

    poligono = Polygons.Polygon([ponto1, ponto2, ponto3, ponto1], 'blue')
    poligono2 = Polygons.Polygon([ponto4, ponto3, ponto1, ponto4], 'pink')

    poligonos = Polygons.Polygons()
    poligonos.add_polygon(poligono, 'pol1')
    poligonos.add_polygon(poligono2, 'pol2')

    plot_polygons(poligonos)


